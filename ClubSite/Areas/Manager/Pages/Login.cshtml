@page "~/manager/login"
@using ClubSite
@model ClubSite.Areas.Manager.Pages.LoginModel
@inject ManagerLocalizer Localizer
@{
    Layout = null;
    var module = Piranha.App.Modules.Get<Module>();
    var preRelease = Piranha.Utils.IsPreRelease(typeof(Module).Assembly) ? "pre-release" : "";
    var webAppInfo = new ClubSite.Library.AssemblyInfo(typeof(WebAppStartup));
}
<!doctype html>
<html lang="en" style="min-height:100%">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <link rel="stylesheet" href="~/manager/assets/css/slim.min.css">
    @foreach (var style in module.Styles)
    {
        <link href="@Url.Content(style)" rel="stylesheet" type="text/css" />
    }

    <title>@Localizer.General["Login"]</title>
</head>
<body id="login" class="@preRelease">
    @if (!string.IsNullOrEmpty(preRelease))
    {
        <div class="pre-release">Pre-release</div>
    }
    <div class="container">
        <form method="post" class="needs-validation" novalidate>
            @Html.AntiForgeryToken()
            <div class="card card-login @(!Model.ModelState.IsValid ? "has-error" : "")">
                <div class="card-body card-body-logo">
                    <div class="logo"></div>
                    <p class="banner">
                        Piranha CMS
                        <small>@Localizer.General["Version"] @Piranha.Utils.GetAssemblyVersion(typeof(Module).Assembly)</small>
                    </p>
                </div>

                @if (!Model.ModelState.IsValid)
                {
                    <p class="error-message">@string.Join("\r\n", ModelState.Where(p => p.Value != null).SelectMany(p => p.Value!.Errors).Select(e => e.ErrorMessage))</p>
                }

                <div class="card-body card-body-form">
                    <div class="form-group">
                        <label for="username" class="col-form-label col-form-label-lg">@Localizer.General["Username"]</label>
                        <input autofocus id="username" required name="username" type="text" class="form-control form-control-lg text-center" placeholder="@Localizer.General["Username"].Value.ToLower()">
                    </div>
                    <div class="form-group">
                        <label for="password" class="col-form-label col-form-label-lg">@Localizer.General["Password"]</label>
                        <input id="password" name="password" required type="password" class="form-control form-control-lg text-center" placeholder="@Localizer.General["Password"].Value.ToLower()">
                    </div>
                    <button class="btn btn-lg btn-block btn-primary" type="submit">
                        <i class="fas fa-check"></i>
                    </button>
                </div>
            </div>
        </form>
    </div>
    <div class="text-center" style="margin-top: 3rem">
        <p style="text-transform: none; font-size: 1rem; margin-top: 0; color: gray"><a href="https://github.com/axuno/ClubSite" target="_blank" style="color: gray" onmouseover="this.style.color = 'gray'" onmouseout="this.style.color = 'gray'">axuno ClubSite, @Localizer.General["Version"] v@(webAppInfo.Version?[..13])</a></p>
        <small style="text-transform: none; font-size: 0.8rem; margin-top: 0; color: gray">
            Design und Realisierung:<br/>
            Norbert Bietsch, <a href="https://axuno.net/" target="_blank" style="color: gray" onmouseover="this.style.color = 'gray'" onmouseout="this.style.color = 'gray'">axuno gemeinnützige GmbH</a>
        </small>
    </div>
    <script>
        (function () {
            'use strict';
            window.addEventListener('load', function () {
                const forms = document.getElementsByClassName('needs-validation');
                const validation = Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();
    </script>
</body>
</html>